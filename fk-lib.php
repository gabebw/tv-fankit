<?php
/**
 * Library of general, non-type-specific functions.
 * @package FanKit
 */
require_once('fk-lib-character.php');
require_once('fk-lib-cast.php');
require_once('fk-lib-episode.php');

/**
 * Easy way to get a guessable name for a character, episode, etc.
 * @param string $name The name to make nice.
 * - Um, is this necessary?
 * - It does make it so we don't have to remember 'David "Curly" Moran', just 'david-curly-moran'.
 */
function fk_get_nicename($name){
	$nicename = sanitize_title_with_dashes($name);
	return $nicename;
}

/**
 * Set a meta value for a post; automatically namespaced.
 * Prefixed with a '_' so it doesn't show up as a user-editable
 * field in the edit post page.
 */
function fk_set_meta($post_id, $key, $value){
	if( ! update_post_meta($post_id, '_fk_' . $key, $value) ){
		add_post_meta($post_id, '_fk_' . $key, $value);
	}
	return true;
}

/**
 * Get a fankit-set meta value for a post.
 * @param int $post_id the id of the post to get meta info from
 * @param string $key the meta key to retrieve (automatically namespaced)
 * @param bool $single Whether to retrieve value as single value. Behaves exactly the same as third param of get_post_meta.
 * @return mixed Returns false if value not set, or value if key is set.
 */
function fk_get_meta($post_id, $key, $single = true){
	$val = get_post_meta($post_id, '_fk_' . $key, $single);
	if( $val === '' ){
		// Not set.
		return false;
	} else {
		return $val;
	}
}

/**
 * Retrieve all FanKit-related metadata for a post, i.e. metakeys beginning with "_fk_".
 * As far as I know, this "namespace" is not used by any other plugins.
 *
 * @param int $post_id The id of the post to get meta info for.
 * @return array Array of non-namespaced metadata (eg if key is '_fk_foo', it's in the array as 'foo'). This allows for use of fk_blah_meta functions on the returned array.
 */
function fk_get_meta_all($post_id){
	$fk_meta = array();
	$custom = get_post_custom($post_id);
	if( empty($custom) ){
		return $fk_meta;
	}
	foreach( $custom as $key => $val ){
		if( 0 === strpos($key, '_fk_') ){
			$val = $val[0]; // array -> string
			$new_key = preg_replace('/^_fk_/', '', $key);
			$fk_meta[$new_key]= $val;
		}
	}
	return $fk_meta;
}

function fk_delete_meta($post_id, $key){
	delete_post_meta($post_id, '_fk_'. $key);
}

function fk_delete_meta_all($post_id){
	$metas = fk_get_meta_all($post_id);
	foreach( $metas as $key => $val ){
		fk_delete_meta($post_id, $key);
	}
}

/**
 * Get the type (episode/cast/character) of a post. Not using the
 * general-purpose function because this does additional validation.
 * @return mixed Returns string if valid type, false if type is unset or invalid
 */
function fk_get_post_type($post_id){
	global $fk_settings;
	$type = fk_get_meta($post_id, 'type');
	if($fk_settings->is_valid_type($type) ){
		return $type;
	} else {
		// Not set, or not valid.
		return false;
	} 
}

/**
 * @param string $txt A string; assumed to be translated already
 */
function fk_show_basic_notice($txt){
	echo '<div id="fk_message" class="updated">';
	echo '<p><b>'.__('Welcome to TV FanKit!').'</b>';
	echo ' <small><a href="options-general.php?page=tv-fankit/fk-options-page.php">'.__('(Hide FanKit messages)').'</a></small>';
	echo'</p>';
	echo "<p>$txt</p>";
	echo '</div>';
}

/**
 * Autocreates a quote page for the given season.
 * Actually creates a blank page with the season-quote-page.php template set.
 * @param int $season Number of the season to create a quote page for.
 * @return bool Returns true if page was created successfully or already existed, false if specified episode does not exist or page was not created.
 */
function fk_write_season_quote_page($season){
	if( ! is_numeric($season) ){
		return false;
	}
	$season = (int) $season;
	$postarray = array('post_status' => 'publish',
		'post_type' => 'page',
		'content' => '', /* post_content is autogenerated by the page template */
		'post_title' => __("Quotes for Season $season"),
		'page_template' => 'season-quote-page.php',
		'meta' => array(array('_fk_season_quote_page', $season))
	);
	$page_array = query_posts("meta_key=_fk_season_quote_page&meta_value=$season");
	$page_exists = count($page_array) > 0;
	if( $page_exists ){
		// already exists, don't do anything.
		return true;
	} else {
		// new page
		$page_id = wp_insert_post($postarray);
		// wp_insert_post returns 0 if failed, or page id on success
		return (0 !== $page_id);
	}
}

/**
 * Autocreates a quote page for the episode page with the given id.
 * Actually creates a blank page with the episode-quote-page.php template set.
 * @param int $episode_id ID of the episode page.
 * @return bool Returns true if page was created successfully or already existed, false if specified episode does not exist or page was not created.
 */
function fk_write_episode_quote_page($episode_id){
	global $wpdb;
	if( ! fk_episode_exists($episode_id) ){
		return false;
	}
	list($season, $ep_num) = fk_episode_get_season_ep_num($episode_id);
	$page_title = __("Quotes for Episode") . sprintf("%02dx%02d: %s", $season, $ep_num, $title);
	// TODO: post_parent - depends on season or episode
	// TODO: page_template - depends on whether season or episode
	$postarray = array('post_status' => 'publish',
		'post_type' => 'page',
		'content' => '', /* post_content is autogenerated by the page template */
		'post_title' => $page_title,
		'page_template' => 'episode-quote-page.php',
		'post_parent' => '',
		'meta' => array(array('_fk_episode_quote_page', $season))
	);
	$db_result = $wpdb->get_var($wpdb->prepare("SELECT * FROM $wpdb->postmeta WHERE meta_key = %s AND meta_value = %d",
		'_fk_episode_quote_page', $episode_id));
	$page_exists = (null !== $db_result);
	if( $page_exists ){
		// already exists, don't do anything.
		return true;
	} else {
		// new page
		$page_id = wp_insert_post($postarray);
		// wp_insert_post returns 0 if failed, or page id on success
		return (0 !== $page_id);
	}
}
?>
